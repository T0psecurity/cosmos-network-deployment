---

- include_role:
    name: common

# Set up nginx

- name: Change vars for TLS
  when: bigdipper_use_tls_proxy
  set_fact:
    bigdipper_web_scheme: https
    bigdipper_websocket_scheme: wss
    ssl_provider: "letsencrypt"

- include_role:
    name: hypha.common.nginx

- include_role:
    name: hypha.common.ssl

# Set up big dipper
- name: "Install python dependencies"
  pip:
    name: psycopg2-binary

- include_role:
    name: docker

- name: Remove golang apt package
  ansible.builtin.apt:
    name: golang
    state: absent

- name: Remove system Go files
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - /usr/bin/go
    - /usr/lib/go

- name: Check golang version
  shell: |
    PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
    go version
  register: go_current_version
  ignore_errors: true

- name: Extract golang
  when: not go_version in go_current_version.stdout
  unarchive:
    src: "https://golang.org/dl/go{{go_version}}.{{go_arch}}.tar.gz"
    dest: /usr/local
    remote_src: yes
  become: true

- name: Ensure user exists for bigdipper
  user:
    name: "{{bigdipper_user}}"
    append: true
    groups: adm
    shell: /bin/bash
    comment: User for bigdipper block explorer services

- name: "Register bigdipper db URL"
  set_fact:
    bigdipper_db_url: "postgres://{{bigdipper_db_user}}:{{bigdipper_db_password}}@127.0.0.1:5432/{{bigdipper_db}}"

- name: Get the list of services
  service_facts:

- name: "Stop bdjuno systemd service"
  systemd:
    state: stopped
    name: "{{bdjuno_service_name}}"
  when: "'{{bdjuno_service_name}}.service' in services"

- name: "Stop big-dipper-ui systemd service"
  systemd:
    state: stopped
    name: "{{bdui_service_name}}"
  when: "'{{bdui_service_name}}.service' in services"

- name: Remove hasura docker container
  community.docker.docker_container:
    name: big-dipper-hasura
    state: absent

- name: "Checkout BDJuno"
  become_user: "{{bigdipper_user}}"
  git:
    repo: 'https://github.com/forbole/bdjuno.git'
    dest: "{{bdjuno_dir}}"
    version: "{{bdjuno_version}}"

- name: "Install postgres"
  apt:
    state: present
    pkg:
      - postgresql
      - postgresql-contrib

- name: Remove old database
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{bigdipper_db}}"
    state: absent

- name: Create postgres database
  become_user: postgres
  community.postgresql.postgresql_db:
    name: "{{bigdipper_db}}"

- name: Configure users on postgres
  become_user: postgres
  community.postgresql.postgresql_user:
    db: "{{bigdipper_db}}"
    name: "{{bigdipper_db_user}}"
    password: "{{bigdipper_db_password}}"

- name: Grant user access to database
  become_user: postgres
  community.postgresql.postgresql_privs:
    db: "{{bigdipper_db}}"
    privs: ALL
    type: database
    obj: "{{bigdipper_db}}"
    role: "{{bigdipper_db_user}}"

- name: Find bdjuno schema files
  find:
    paths: "{{bdjuno_dir}}/database/schema"
  register: bdjuno_schemas

- name: Run postgresql bdjuno setup scripts
  community.postgresql.postgresql_script:
    db: "{{bigdipper_db}}"
    path: "{{ item.path }}"
    login_user: "{{bigdipper_db_user}}"
    login_password: "{{bigdipper_db_password}}"
    login_host: "127.0.0.1"
  with_items: "{{ bdjuno_schemas.files | sort(attribute='path') }}"

- name: "Install BDJuno"
  become_user: "{{bigdipper_user}}"
  shell: |
    export PATH=$PATH:/usr/local/go/bin:/home/{{bigdipper_user}}/go/bin
    cd {{bdjuno_dir}}
    make install
    bdjuno init --home {{bdjuno_home}} --replace
  args:
    executable: /bin/bash

# Copy config over from template?
- name: "Generate bdjuno config"
  become_user: "{{bigdipper_user}}"
  template:
    src: bdjuno-config.yaml.j2
    dest: "{{bdjuno_home}}/config.yaml"

- name: copy genesis.json
  copy:
    src: "{{bigdipper_genesis_file_path}}"
    dest: "{{bdjuno_home}}/genesis.json"
    remote_src: true
    owner: "{{bigdipper_user}}"
    group: "{{bigdipper_user}}"

- name: "Parse genesis file with bdjuno"
  become_user: "{{bigdipper_user}}"
  shell: |
    export PATH=$PATH:/usr/local/go/bin:/home/{{bigdipper_user}}/go/bin
    bdjuno parse genesis-file --home {{bdjuno_home}} --genesis-file-path {{bdjuno_home}}/genesis.json

- name: "Set up bdjuno systemd service"
  template:
    src: bdjuno.service.j2
    dest: "/etc/systemd/system/{{bdjuno_service_name}}.service"

- name: "Restart journalctl: the logs must flow"
  systemd:
    state: restarted
    name: systemd-journald

- name: "Run bdjuno systemd service"
  systemd:
    daemon_reload: true
    state: restarted
    enabled: true
    name: "{{bdjuno_service_name}}"

- name: "Run docker image for Hasura"
  community.docker.docker_container:
    state: started
    name: big-dipper-hasura
    image: "hasura/graphql-engine:{{hasura_version}}"
    network_mode: host
    restart_policy: "always"
    env:
      HASURA_GRAPHQL_DATABASE_URL: "{{bigdipper_db_url}}"
      HASURA_GRAPHQL_SERVER_PORT: "{{ hasura_port | string }}"
      HASURA_GRAPHQL_SERVER_HOST: "0.0.0.0"
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: "anonymous"
      ACTION_BASE_URL: "http://localhost:{{bdjuno_hasura_actions_port}}"
      HASURA_GRAPHQL_ADMIN_SECRET: "{{hasura_admin_secret}}"

- name: "Set up node+npm"
  include_role:
    name: geerlingguy.nodejs

- name: "Set up hasura CLI"
  shell: "npm install --unsafe-perm --global hasura-cli@{{hasura_cli_version}}"

- name: "Apply metadata to hasura"
  become_user: "{{bigdipper_user}}"
  shell: |
    cd "{{bdjuno_dir}}/hasura"
    hasura metadata apply --endpoint http://localhost:{{hasura_port}} --admin-secret "{{hasura_admin_secret}}"

- name: "Clone and checkout big-dipper-ui"
  become_user: "{{bigdipper_user}}"
  git:
    repo: 'https://github.com/forbole/big-dipper-2.0-cosmos.git'
    dest: "{{bdui_dir}}"
    version: "{{bdui_version}}"
    force: yes

- name: Install deps for big-dipper-ui
  become_user: "{{bigdipper_user}}"
  shell: |
    cd "{{bdui_dir}}"
    npm ci

- name: "General config for big-dipper-ui"
  become_user: "{{bigdipper_user}}"
  template:
    src: bigdipper-general_config.json.j2
    dest: "{{bdui_dir}}/src/configs/general_config.json"

- name: "Chain config for big-dipper-ui"
  become_user: "{{bigdipper_user}}"
  template:
    src: bigdipper-chain_config.json.j2
    dest: "{{bdui_dir}}/src/configs/chain_config.{{bdui_chain}}.json"

- name: "codegen.yml config for big-dipper-ui"
  become_user: "{{bigdipper_user}}"
  template:
    src: bigdipper-codegen.yml.j2
    dest: "{{bdui_dir}}/codegen.yml"

- name: Check Hasura is in sync with our graphql operations
  become_user: "{{bigdipper_user}}"
  shell: |
    cd "{{bdui_dir}}"
    npm run graphql:codegen

- name: Install .env for big-dipper-ui
  become_user: "{{bigdipper_user}}"
  template:
    src: bigdipper.env.j2
    dest: "{{bdui_dir}}/.env"

- name: Build big-dipper-ui
  become_user: "{{bigdipper_user}}"
  shell: |
    cd "{{bdui_dir}}"
    npm run build

- name: "Create systemd service for big-dipper-ui"
  template:
    src: bigdipper.service.j2
    dest: "/etc/systemd/system/{{bdui_service_name}}.service"

- name: "Run big-dipper-ui"
  systemd:
    daemon_reload: true
    state: restarted
    enabled: true
    name: "{{bdui_service_name}}"
